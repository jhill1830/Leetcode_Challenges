import operator


def evalRPN(tokens):
    """
You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:

    The valid operators are '+', '-', '*', and '/'.
    Each operand may be an integer or another expression.
    The division between two integers always truncates toward zero.
    There will not be any division by zero.
    The input represents a valid arithmetic expression in a reverse polish notation.
    The answer and all the intermediate calculations can be represented in a 32-bit integer.



Example 1:

Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9

Example 2:

Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6

Example 3:

Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22

Input
tokens =
["3","11","5","+","-"]
Output
13
Expected
-13

Input
tokens =
["3","11","+","5","-"]
Output
9
Expected
9

Input
tokens =
["-8","23","8","-","9","23","-","-","*","33","-8","/","+","38","-14","-","-","-7","32","-19","-","11","+","+","+","14","22","-","-","27","-9","-","+","31","+","-12","-11","-","-","14","+","30","+","37","30","-","+","-9","+","7","-","37","+","-5","13","/","-","19","-2","-19","12","+","-","23","+","-","-19","-","+","6","+","-17","+","17","+","5","36","+","-10","+","+","23","-8","-","-","18","-","31","-16","-","+","34","+","-6","+","24","-","22","-","-8","-","28","+","-12","+","39","28","-7","+","+","-14","5","+","5","+","10","+","+","+","-18","*","10","+","-5","11","-","6","+","-","-12","31","+","+","30","29","-","-","39","+","13","-8","-5","+","-","26","19","-","*","-","10","-","-20","5","+","+","0","-","28","-","19","/","28","+","-18","-","28","20","+","-5","-19","+","+","-","-12","-","3","-","6","-15","+","4","-","-","38","+","-9","-","38","-","12","-20","-","10","5","-15","-","-","-","+","-11","+","5","+","2","-","28","+","-9","-11","-","+","37","-","-17","31","-","2","+","+","-16","-12","-","-","12","+","34","-","15","+","8","+","17","-","2","-","33","+","-5","+","14","+","29","-","33","23","+","26","30","-","+","+","39","+","9","24","-","-","20","15","+","-","24","+","37","-","30","-1","-","+","34","+","-13","-","23","15","-","-","-5","-8","8","30","35","-9","22","+","-","-","36","-1","+","5","-","-","+","25","-","+","27","-","16","+","+","+","39","-","15","-","-3","+","5","-6","-","+","-6","-15","-7","-","+","/","13","-","18","+","4","+","29","+","-17","0","-6","-20","-17","+","12","-","+","-","+","+","-10","22","+","+","-11","-","-2","38","-","-","-6","+","0","-","-10","+","-4","-10","+","-","0","-","31","30","-","37","5","+","+","+","-15","+","38","4","-","-16","-17","+","+","+","38","-","27","-19","/","12","+","/"]
Stdout
10
Output
10
Expected
11
    """

    # Whenever you encounter an operand you start that operation using the number before the operand and the last used number. Unless it's the first operand encountered, in which case it will use the two number before it.

    # Have operand dictionary?
    op_dict = {"+": operator.add, "*": operator.mul,
               "-": operator.sub, "/": operator.truediv}

    # have a stack array and result int
    stack = []

    # iterate through token array and append int's elements to stack array
    # when encountering operand in token.  Use it with the last element in stack array and then do operation with result(if not empty) then pop that element off stack.  If result empty, use last two stack elements
    for el in tokens:
        if len(tokens) == 1:
            result = int(tokens[0])
            return result

        if el in op_dict and len(stack) > 1:
            #            if result == "":
            #                result = op_dict[el](int(stack[-2]), int(stack[-1]))
            #                stack.pop()
            #                stack.pop()
            #                stack.append(result)
            #            else:
            #                if el == "/" and int(stack[-1]) < 0:
            #                    result = 0
            #                    stack.pop()
            #                    stack.pop()
            #                    stack.append(result)
            #                else:
            #                    result = op_dict[el](int(stack[-2]), int(stack[-1]))
            #                    stack.pop()
            #                    stack.pop()
            #                    stack.append(result)
            elA, elB = stack.pop(), stack.pop()
            stack.append(int(op_dict[el](elB, elA)))

        else:
            stack.append(int(el))
    print(stack[0])
    return stack[0]


# might have to change this to append the result to the stack as it seems to subract in the incorrect order depending on the stack
# will have to append result to stack. May have to change if statement to be if stack length > 1.  Will need to always be stack[-2] 'operand' stack[-1]
evalRPN(["10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"])
evalRPN(["3", "11", "5", "+", "-"])
evalRPN(["3", "11", "+", "5", "-"])
evalRPN(["-8", "23", "8", "-", "9", "23", "-", "-", "*", "33", "-8", "/", "+", "38", "-14", "-", "-", "-7", "32", "-19", "-", "11", "+", "+", "+", "14", "22", "-", "-", "27", "-9", "-", "+", "31", "+", "-12", "-11", "-", "-", "14", "+", "30", "+", "37", "30", "-", "+", "-9", "+", "7", "-", "37", "+", "-5", "13", "/", "-", "19", "-2", "-19", "12", "+", "-", "23", "+", "-", "-19", "-", "+", "6", "+", "-17", "+", "17", "+", "5", "36", "+", "-10", "+", "+", "23", "-8", "-", "-", "18", "-", "31", "-16", "-", "+", "34", "+", "-6", "+", "24", "-", "22", "-", "-8", "-", "28", "+", "-12", "+", "39", "28", "-7", "+", "+", "-14", "5", "+", "5", "+", "10", "+", "+", "+", "-18", "*", "10", "+", "-5", "11", "-", "6", "+", "-", "-12", "31", "+", "+", "30", "29", "-", "-", "39", "+", "13", "-8", "-5", "+", "-", "26", "19", "-", "*", "-", "10", "-", "-20", "5", "+", "+", "0", "-", "28", "-", "19", "/", "28", "+", "-18", "-", "28", "20", "+", "-5", "-19", "+", "+", "-", "-12", "-", "3", "-", "6", "-15", "+", "4", "-", "-", "38", "+", "-9", "-", "38", "-", "12", "-20", "-", "10",
        "5", "-15", "-", "-", "-", "+", "-11", "+", "5", "+", "2", "-", "28", "+", "-9", "-11", "-", "+", "37", "-", "-17", "31", "-", "2", "+", "+", "-16", "-12", "-", "-", "12", "+", "34", "-", "15", "+", "8", "+", "17", "-", "2", "-", "33", "+", "-5", "+", "14", "+", "29", "-", "33", "23", "+", "26", "30", "-", "+", "+", "39", "+", "9", "24", "-", "-", "20", "15", "+", "-", "24", "+", "37", "-", "30", "-1", "-", "+", "34", "+", "-13", "-", "23", "15", "-", "-", "-5", "-8", "8", "30", "35", "-9", "22", "+", "-", "-", "36", "-1", "+", "5", "-", "-", "+", "25", "-", "+", "27", "-", "16", "+", "+", "+", "39", "-", "15", "-", "-3", "+", "5", "-6", "-", "+", "-6", "-15", "-7", "-", "+", "/", "13", "-", "18", "+", "4", "+", "29", "+", "-17", "0", "-6", "-20", "-17", "+", "12", "-", "+", "-", "+", "+", "-10", "22", "+", "+", "-11", "-", "-2", "38", "-", "-", "-6", "+", "0", "-", "-10", "+", "-4", "-10", "+", "-", "0", "-", "31", "30", "-", "37", "5", "+", "+", "+", "-15", "+", "38", "4", "-", "-16", "-17", "+", "+", "+", "38", "-", "27", "-19", "/", "12", "+", "/"])
